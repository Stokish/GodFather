from django.shortcuts import (render,
                              get_object_or_404,
                              redirect,
                              reverse)
from django.urls import reverse_lazy

from django.views.generic import (ListView,
                                  DetailView,
                                  CreateView,
                                  UpdateView,
                                  DeleteView,
                                  RedirectView)
# views generated by django
from django.contrib.auth.mixins import (LoginRequiredMixin,
                                        UserPassesTestMixin)
# makes user login and being the  owner of object(author) necessary

from django.contrib.auth.models import User
from django.contrib import messages
from .models import Post, Comment
from django.db.models import Q
from .forms import CommentForm


def search(request):
    post_list = Post.objects.all()
    query = request.GET.get('q', 'utf-8')
    if query:
        post_list = post_list.filter(
            Q(title__icontains=query) |
            Q(content__icontains=query)
        ).distinct()
    context = {
        'queryset': post_list
    }

    return render(request, 'blog/search_results.html', context)


class CommentDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Comment

    def get_success_url(self):
        post = self.object.post
        messages.success(self.request, "Comment deleted successfully")
        return reverse_lazy('post-detail', kwargs={'pk': post.id})

    def test_func(self):
        comment = self.get_object()
        if self.request.user == comment.user:
            return True
        return False


class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'
    context_object_name = 'posts'
    ordering = ['-date_posted']
    paginate_by = 4


class UserPostListView(ListView):
    model = Post
    template_name = 'blog/user_blog.html'
    context_object_name = 'posts'
    paginate_by = 4

    def get_queryset(self):
        user = get_object_or_404(User, username=self.kwargs.get('username'))
        return Post.objects.filter(author=user).order_by('-date_posted')


class PostCreateView(LoginRequiredMixin, CreateView):
    model = Post
    fields = ['image', 'title', 'content', 'categories']

    def form_valid(self, form):
        messages.success(self.request, "Post created successfully")
        form.instance.author = self.request.user
        return super().form_valid(form)


class PostUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Post
    fields = ['image', 'title', 'content', 'categories']

    def form_valid(self, form):
        messages.success(self.request, "Post updated successfully")
        form.instance.author = self.request.user
        return super().form_valid(form)

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False


class PostDetailView(DetailView):
    model = Post
    form = CommentForm()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['page_request_var'] = "page"
        context['form'] = self.form
        return context

    def post(self, request, *args, **kwargs):
        form = CommentForm(request.POST)
        if form.is_valid():
            post = self.get_object()
            form.instance.user = request.user
            form.instance.post = post
            form.save()
            return redirect(reverse("post-detail", kwargs={
                'pk': post.pk
            }))


class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Post

    def get_success_url(self):
        messages.success(self.request, "Post deleted successfully")
        return reverse_lazy('blog')

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False


